
- Lancer des calculs en faisant diminuer progressivement les parametres step, pas angulaire, etc 
jusqu'a convergeance du nombre d'arrangements.

idee : calculer le nombre de conf E3 engendrées par chaque conf E2 => bad idea

- re-ecrire pour node.js la partie searchArrangment: done

idee: regrouper moveto, rotate et resize en une seule fonction qui prend:
   - position x,y du centre du carre
   - size
   - angle rotation
==> done

idee optimisation: separer arrsN3 en plusieurs parties ==> done

arrsN3 devient un array a 2 dimensions arrsN3[i][j]
- i correspond au nombre entier obtenu en faisant la somme de chaque colonne de V puis un tri croissant
- j correspond au nombre entier obtenu en faisant la somme de chaque colonne de I puis un tri croissant

- ecrire le code pour creer les svg a partir du fichier arrangments-found-*.json

- creer les tests avec Jest ?

- optimisation: ne faire bouger qu'un seul carre à la fois afin de ne pas 
   recalculer inutilement les intersections entre les deux autres carres

- mettre en place un outil qui va permettre de charger chaque arrangments trouvé et de le rectifier 
  sans changer les matrice V et F afin de rendre le svg plus lisible (sans avoir a zoomer).
  A chaque step mettre en place un syteme qui controle si V et F restent constants et ne pas autoriser 
  la modification. Creer un bouton pour mettre à jour le fichier svg de l'arrangement. 
==> done but not tested

- mettre en place un outil qui va permettre de charger la liste des arrangments trouvés et de
 construire un nouvel arrangement a la main pour verifier si il est dans la liste 
==> done

- Ajouter un button "image miroir" a la palette de transformations + rotation d'ensenble des carrés
- idee new projet: intersection de segments (position centre, tailles et angles variables)

- idee new projet: calculer le nombre d'arrangements possibles de n polygones reguliers convexes:
triangles equilaterals, carrés, pentagones, hexagone, etc.
Voir si il exite une formule U(n) = ...
Ways to intersect regular convex polygons

- ecrire une fct qui renvoie false si 2 segments ne se croisent pas sinon renvoyer le point d'intersection: done
=> done
- faire update fuzzy sur searchArrangments_V1_N2 et verifier que les arrangements sont meilleurs: à finir

N=2 avec rotation et resize: 12
N=2 sans resize avec rotation: donne 7 arr
N=2 sans rotation avec resize: donne 4 arr
N=2 sans rotation et sans resize: donne 1 arr

N=3 donne ... arr (>= 4337)
N=3 sans resize avec rotation:: donne 457 arr (la rotation a un impact fort sur le nombre d'arrangement trouvés)
N=3 sans rotation avec resize: donne 47 arr
N=3 sans rotation et sans resize: donne 6 arr

http://www.ams.org/publicoutreach/feature-column/fc-2019-01
https://www.researchgate.net/publication/321604192_Arrangements_of_Pseudocircles_On_Circularizability


Comment detecter un cycle ?
Idee: calculer le polygon délimitant l'intérieur de la cage et tester si le carré 4 est à l'intérieur. 
Pour un arrangement donné il faut trouver les cages et le polygon associés à chaque cage.  


In relation to the Collatz conjecture Paul Erdos once said "Mathematics is not yet ready for such problems.'' 
It might be possible that this problem doesn’t have any mathematical solution.
Is this problem decidable ?
